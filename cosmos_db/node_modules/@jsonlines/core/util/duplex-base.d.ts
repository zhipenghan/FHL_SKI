/// <reference types="node" />
import { Duplex, DuplexOptions } from "stream";
export interface DuplexSimpleSource {
    writable: NodeJS.WritableStream;
    readable: NodeJS.ReadableStream;
}
export declare type DuplexSource = NodeJS.ReadWriteStream[] | DuplexSimpleSource;
declare type DuplexCallback = (error?: Error | null) => void;
export declare class DuplexBase extends Duplex {
    #private;
    constructor(source: DuplexSource, options: DuplexOptions);
    private __writeAsync__;
    _write(chunk: unknown, encoding: BufferEncoding, callback: DuplexCallback): void;
    _read(size: number): void;
    _final(callback: DuplexCallback): void;
}
export declare type AsyncValueGetter<V> = V | Promise<V> | (() => V | Promise<V>);
export declare type AsyncDuplexSource = AsyncValueGetter<AsyncValueGetter<NodeJS.ReadWriteStream>[]> | AsyncValueGetter<{
    writable: AsyncValueGetter<NodeJS.WritableStream>;
    readable: AsyncValueGetter<NodeJS.ReadableStream>;
}>;
export declare class AsyncDuplexBase extends Duplex {
    #private;
    constructor(asyncSource: AsyncDuplexSource, options: DuplexOptions);
    private setupSourceOnce;
    private __writeAsync__;
    _write(chunk: unknown, encoding: BufferEncoding, callback: DuplexCallback): void;
    _read(size: number): void;
    _final(callback: DuplexCallback): void;
}
export {};
