{"version":3,"file":"duplex-base-32ed1b65.js","sources":["../../../src/util/drain.ts","../../../src/util/duplex-base.ts"],"sourcesContent":["export function drain(\n  writable: import(\"stream\").Writable | NodeJS.WritableStream,\n): Promise<void> {\n  if ((writable as import(\"stream\").Writable).destroyed) {\n    return Promise.reject(new Error(\"premature close\"));\n  }\n\n  return new Promise((resolve, reject) => {\n    const done = () => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      writable.removeListener(\"close\", onClose);\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      writable.removeListener(\"drain\", onDrain);\n    };\n    const onClose = () => {\n      done();\n      reject(new Error(\"premature close\"));\n    };\n    const onDrain = () => {\n      done();\n      resolve();\n    };\n    writable.on(\"close\", onClose);\n    writable.on(\"drain\", onDrain);\n  });\n}\n","import { Duplex, DuplexOptions, pipeline } from \"stream\";\nimport { drain } from \"./drain\";\n\nexport interface DuplexSimpleSource {\n  writable: NodeJS.WritableStream;\n  readable: NodeJS.ReadableStream;\n}\n\nexport type DuplexSource = NodeJS.ReadWriteStream[] | DuplexSimpleSource;\n\ntype DuplexCallback = (error?: Error | null) => void;\n\nexport class DuplexBase extends Duplex {\n  #readable: NodeJS.ReadableStream;\n  #readSetup = false;\n  #writable: NodeJS.WritableStream;\n\n  constructor(source: DuplexSource, options: DuplexOptions) {\n    super(options);\n    if (Array.isArray(source)) {\n      this.#writable = source[0] as NodeJS.WritableStream;\n      this.#readable = source[source.length - 1] as NodeJS.ReadableStream;\n      pipeline(source);\n    } else {\n      this.#writable = source.writable;\n      this.#readable = source.readable;\n    }\n  }\n\n  private async __writeAsync__(\n    chunk: unknown,\n    encoding: BufferEncoding,\n    callback: DuplexCallback,\n  ) {\n    let errIsFromCallback = false;\n    try {\n      const writable = this.#writable;\n      let resolve: () => void;\n      let reject: (err: Error) => void;\n      const p = new Promise((rsv, rjt) => {\n        resolve = rsv;\n        reject = rjt;\n      });\n\n      if (\n        !writable.write(chunk as never, encoding, (err) => {\n          if (err) reject(err);\n          else resolve();\n        })\n      ) {\n        await drain(writable);\n      }\n\n      await p;\n\n      try {\n        callback();\n      } catch (err) {\n        errIsFromCallback = true;\n        throw err;\n      }\n    } catch (err) {\n      if (!errIsFromCallback) callback(err);\n      else throw err;\n    }\n  }\n\n  _write(\n    chunk: unknown,\n    encoding: BufferEncoding,\n    callback: DuplexCallback,\n  ): void {\n    void this.__writeAsync__(chunk, encoding, callback);\n  }\n\n  _read(size: number): void {\n    if (!this.#readSetup) {\n      const readable = this.#readable;\n      readable\n        .on(\"readable\", () => {\n          let chunk;\n          while (null !== (chunk = readable.read(size))) {\n            if (!this.push(chunk)) break;\n          }\n        })\n        .on(\"end\", () => {\n          // EOF\n          this.push(null);\n        });\n\n      this.#readSetup = true;\n    }\n  }\n\n  _final(callback: DuplexCallback): void {\n    const writable = this.#writable;\n    writable.end(callback);\n  }\n}\n\nexport type AsyncValueGetter<V> = V | Promise<V> | (() => V | Promise<V>);\n\nexport type AsyncDuplexSource =\n  | AsyncValueGetter<AsyncValueGetter<NodeJS.ReadWriteStream>[]>\n  | AsyncValueGetter<{\n      writable: AsyncValueGetter<NodeJS.WritableStream>;\n      readable: AsyncValueGetter<NodeJS.ReadableStream>;\n    }>;\n\nfunction resolveAsyncValue<V>(v: AsyncValueGetter<V>): Promise<V> {\n  return Promise.resolve<V>(\n    typeof v === \"function\"\n      ? //\n        (v as () => V | Promise<V>)()\n      : v,\n  );\n}\n\nasync function resolveAsyncDuplexSource(\n  asyncSource: AsyncDuplexSource,\n): Promise<DuplexSimpleSource> {\n  const sc = await resolveAsyncValue(asyncSource);\n  if (Array.isArray(sc)) {\n    const streams = await Promise.all(sc.map((v) => resolveAsyncValue(v)));\n    pipeline(streams);\n    return {\n      writable: streams[0] as NodeJS.WritableStream,\n      readable: streams[streams.length - 1] as NodeJS.ReadableStream,\n    };\n  } else {\n    const writable = await resolveAsyncValue(sc.writable);\n    const readable = await resolveAsyncValue(sc.readable);\n    return {\n      writable,\n      readable,\n    };\n  }\n}\n\nexport class AsyncDuplexBase extends Duplex {\n  constructor(asyncSource: AsyncDuplexSource, options: DuplexOptions) {\n    super(options);\n    this.#asyncSource = asyncSource;\n  }\n\n  #asyncSource: AsyncDuplexSource | undefined;\n  #source: Promise<DuplexSimpleSource> | undefined;\n  private setupSourceOnce(): Promise<{\n    writable: NodeJS.WritableStream;\n    readable: NodeJS.ReadableStream;\n  }> {\n    if (this.#source === undefined) {\n      const asyncSource = this.#asyncSource;\n      if (!asyncSource) throw new Error(\"invalid state\");\n      this.#source = resolveAsyncDuplexSource(asyncSource);\n    }\n\n    return this.#source;\n  }\n\n  private async __writeAsync__(\n    chunk: unknown,\n    encoding: BufferEncoding,\n    callback: DuplexCallback,\n  ) {\n    let errIsFromCallback = false;\n    try {\n      const { writable } = await this.setupSourceOnce();\n      let resolve: () => void;\n      let reject: (err: Error) => void;\n      const p = new Promise((rsv, rjt) => {\n        resolve = rsv;\n        reject = rjt;\n      });\n\n      if (\n        !writable.write(chunk as never, encoding, (err) => {\n          if (err) reject(err);\n          else resolve();\n        })\n      ) {\n        await drain(writable);\n      }\n\n      await p;\n\n      try {\n        callback();\n      } catch (err) {\n        errIsFromCallback = true;\n        throw err;\n      }\n    } catch (err) {\n      if (!errIsFromCallback) callback(err);\n      else throw err;\n    }\n  }\n\n  _write(\n    chunk: unknown,\n    encoding: BufferEncoding,\n    callback: DuplexCallback,\n  ): void {\n    void this.__writeAsync__(chunk, encoding, callback);\n  }\n\n  #readSetup = false;\n  _read(size: number): void {\n    if (!this.#readSetup) {\n      void this.setupSourceOnce().then(({ readable }) => {\n        readable\n          .on(\"readable\", () => {\n            let chunk;\n            while (null !== (chunk = readable.read(size))) {\n              if (!this.push(chunk)) break;\n            }\n          })\n          .on(\"end\", () => {\n            // EOF\n            this.push(null);\n          });\n\n        this.#readSetup = true;\n      });\n    }\n  }\n\n  _final(callback: DuplexCallback): void {\n    void this.setupSourceOnce().then(({ writable }) => {\n      writable.end(callback);\n    });\n  }\n}\n"],"names":["drain","writable","destroyed","Promise","reject","Error","resolve","done","removeListener","onClose","onDrain","on","resolveAsyncValue","v","resolveAsyncDuplexSource","asyncSource","sc","Array","isArray","streams","all","map","pipeline","readable","length","AsyncDuplexBase","Duplex","constructor","options","setupSourceOnce","undefined","__writeAsync__","chunk","encoding","callback","errIsFromCallback","p","rsv","rjt","write","err","_write","_read","size","then","read","push","_final","end"],"mappings":"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"}