{"version":3,"file":"stringify.js","sources":["../src/stringify.ts"],"sourcesContent":["import { AsyncDuplexBase } from \"./util/duplex-base\";\nimport { Transform, TransformCallback } from \"stream\";\nimport { JsonLinesGzipOption } from \"./parse\";\nimport { LineSepOption, getLineSepString } from \"./util/line-sep\";\n\nexport interface JsonLinesStringifyOptions<V> {\n  /**\n   * specify the encoding to encode string to buffer\n   *\n   * NOTE that [the standard jsonlines](http://jsonlines.org/)\n   * requires `utf8` as file encoding\n   *\n   * Defaults to `Buffer.from` default encoding,\n   * which is `utf8`.\n   */\n  encoding?: BufferEncoding;\n\n  /**\n   * specify a function to stringify values.\n   * It accepts a value as parameter,\n   * and should return a string or a Promise<string>.\n   *\n   * Defaults to `JSON.stringify`\n   */\n  stringify?: (v: V) => string | Promise<string>;\n\n  /**\n   * specify whether to gzip the output\n   *\n   * Omit or use `false` to disable gzip.\n   * Use `true` to gzip with default options.\n   * Or use an object as params for `require('zlib').createGzip`\n   */\n  gzip?: JsonLinesGzipOption;\n\n  /**\n   * specify the line ending to be used in the output\n   *\n   * NOTE that [the standard jsonlines](http://jsonlines.org/)\n   * requires `\\n` as line separator\n   *\n   * Defaults to `\\n`\n   */\n  lineSep?: LineSepOption;\n}\n\nexport class JsonLinesStringifyStream<V> extends Transform {\n  #stringify: (v: V) => string | Promise<string>;\n\n  readonly encoding: BufferEncoding | undefined;\n  readonly lineSep: string;\n\n  constructor(options?: JsonLinesStringifyOptions<V>) {\n    super({\n      writableObjectMode: true,\n    });\n\n    this.encoding = options?.encoding;\n    this.lineSep = getLineSepString(options?.lineSep ?? \"lf\");\n    this.#stringify = options?.stringify ?? JSON.stringify;\n  }\n\n  private async _transformAsync(chunk: V) {\n    const str = await this.#stringify(chunk);\n    const buf = Buffer.from(str + this.lineSep, this.encoding);\n    this.push(buf);\n  }\n\n  _transform(chunk: V, encoding: unknown, callback: TransformCallback): void {\n    this._transformAsync(chunk)\n      .then(() => callback())\n      .catch((err) => callback(err));\n  }\n}\n\nexport class JsonLinesStringifyStreamWithGzip<\n  V = unknown\n> extends AsyncDuplexBase {\n  constructor(options?: JsonLinesStringifyOptions<V>) {\n    const gzip = options?.gzip;\n\n    const stringifyStream = new JsonLinesStringifyStream(options);\n\n    super(\n      {\n        readable: gzip\n          ? () =>\n              import(\"zlib\").then((zlib) => {\n                const gzipStream = zlib.createGzip(\n                  gzip === true ? undefined : gzip,\n                );\n                stringifyStream.pipe(gzipStream);\n                return gzipStream;\n              })\n          : stringifyStream,\n        writable: stringifyStream,\n      },\n      { readableObjectMode: false, writableObjectMode: true },\n    );\n  }\n}\n\nexport function stringify<V>(\n  options?: JsonLinesStringifyOptions<V>,\n): JsonLinesStringifyStream<V> | JsonLinesStringifyStreamWithGzip<V> {\n  if (options?.gzip) {\n    return new JsonLinesStringifyStreamWithGzip(options);\n  } else {\n    return new JsonLinesStringifyStream(options);\n  }\n}\n"],"names":["JsonLinesStringifyStream","Transform","constructor","options","writableObjectMode","encoding","lineSep","getLineSepString","stringify","JSON","_transformAsync","chunk","str","buf","Buffer","from","push","_transform","callback","then","catch","err","JsonLinesStringifyStreamWithGzip","AsyncDuplexBase","gzip","stringifyStream","readable","zlib","gzipStream","createGzip","undefined","pipe","writable","readableObjectMode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CaA,iCAAoCC;AAM/CC,EAAAA,YAAYC;;;AACV,UAAM;AACJC,MAAAA,kBAAkB,EAAE;AADhB,KAAN;;;;;;;AAIA,SAAKC,QAAL,GAAgBF,OAAhB,aAAgBA,OAAhB,uBAAgBA,OAAO,CAAEE,QAAzB;AACA,SAAKC,OAAL,GAAeC,wBAAgB,qBAACJ,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEG,OAAV,+DAAqB,IAArB,CAA/B;;AACA,0EAAkBH,OAAlB,aAAkBA,OAAlB,uBAAkBA,OAAO,CAAEK,SAA3B,mEAAwCC,IAAI,CAACD,SAA7C;AACD;;AAEO,QAAME,eAAN,CAAsBC,KAAtB;AACN,UAAMC,GAAG,GAAG,oCAAM,IAAN,mBAAM,IAAN,EAAsBD,KAAtB,CAAZ;AACA,UAAME,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAG,GAAG,KAAKN,OAAvB,EAAgC,KAAKD,QAArC,CAAZ;AACA,SAAKW,IAAL,CAAUH,GAAV;AACD;;AAEDI,EAAAA,UAAU,CAACN,KAAD,EAAWN,QAAX,EAA8Ba,QAA9B;AACR,SAAKR,eAAL,CAAqBC,KAArB,EACGQ,IADH,CACQ,MAAMD,QAAQ,EADtB,EAEGE,KAFH,CAEUC,GAAD,IAASH,QAAQ,CAACG,GAAD,CAF1B;AAGD;;;MAGUC,yCAEHC;AACRrB,EAAAA,YAAYC;AACV,UAAMqB,IAAI,GAAGrB,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEqB,IAAtB;AAEA,UAAMC,eAAe,GAAG,IAAIzB,wBAAJ,CAA6BG,OAA7B,CAAxB;AAEA,UACE;AACEuB,MAAAA,QAAQ,EAAEF,IAAI,GACV,MACE,mFAAO,MAAP,OAAeL,IAAf,CAAqBQ,IAAD;AAClB,cAAMC,UAAU,GAAGD,IAAI,CAACE,UAAL,CACjBL,IAAI,KAAK,IAAT,GAAgBM,SAAhB,GAA4BN,IADX,CAAnB;AAGAC,QAAAA,eAAe,CAACM,IAAhB,CAAqBH,UAArB;AACA,eAAOA,UAAP;AACD,OAND,CAFQ,GASVH,eAVN;AAWEO,MAAAA,QAAQ,EAAEP;AAXZ,KADF,EAcE;AAAEQ,MAAAA,kBAAkB,EAAE,KAAtB;AAA6B7B,MAAAA,kBAAkB,EAAE;AAAjD,KAdF;AAgBD;;;SAGaI,UACdL;AAEA,MAAIA,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEqB,IAAb,EAAmB;AACjB,WAAO,IAAIF,gCAAJ,CAAqCnB,OAArC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIH,wBAAJ,CAA6BG,OAA7B,CAAP;AACD;AACF;;;;;;"}